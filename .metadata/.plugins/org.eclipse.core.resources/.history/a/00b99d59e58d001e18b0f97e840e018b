package net.lighthouseplan.spring.junit.controllers;

import org.springframework.test.web.servlet.RequestBuilder;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import net.lighthouseplan.spring.junit.services.AccountService;

@SpringBootTest
@AutoConfigureMockMvc
public class RegisterControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@MockBean
	private AccountService accountService;
	
	//サービスクラスを使ったデータ作成
	@BeforeEach
	public void prepareDate() {
		
		//登録できる場合　"Alice","alice1234" true
		when(accountService.createAccount("Alice", "alice1234")).thenReturn(true);
		//登録できない場合　 Ana   false
		when(accountService.createAccount(eq("Ana"),any())).thenReturn(false);
	}
	
	//登録画面が正常に
	@Test
	public void testGetRigisterPage_Success() throws Exception{
		RequestBuilder request = MockMvcRequestBuilders
				.get("/register");
		
		//返回对应的视图view
		mockMvc.perform(request)
		.andExpect(view().name("register.html"));
	}
	
	//ユーザーの登録が成功する
	@Test
	public void testRegister_Success() throws Exception{
		RequestBuilder request = MockMvcRequestBuilders
				.post("/register")
				.param("username", "Alice")
				.param("password", "alice1234");
		
		//対応するビューを返します。
		mockMvc.perform(request)
		.andExpect(view().name("login.html"));			
		
	}
	
	//ユーザー名がAna  登録が失敗しました
	@Test
	public void testRegister_Faile() throws Exception{
		RequestBuilder request = MockMvcRequestBuilders
				.post("/register")
				.param("username", "Ana")
				.param("password", "1234");
		
		//対応するビューを返します。
		mockMvc.perform(request)
		.andExpect(model().attribute("error", true))
		.andExpect(view().name("register.html"));
		
		
	}
	
	
	
	
	
	
	

}

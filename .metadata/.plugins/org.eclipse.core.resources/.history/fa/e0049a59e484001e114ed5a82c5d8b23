package blog.com.controllers;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import blog.com.models.entity.AccountEntity;
import blog.com.models.entity.Blog;
import blog.com.services.BlogService;
import jakarta.servlet.http.HttpSession;

@Controller
public class BlogController {
	
	@Autowired
	private BlogService blogService;
	
	@Autowired
	private HttpSession session;
	
	//Blog一览
	//展示当前用户的所有blog
	@GetMapping("/blog/list")
	public String getBlogList(Model model) {
		AccountEntity account = (AccountEntity)session.getAttribute("account");
		if(account == null) {
			return "redirect:/login";
		}else {
			List<Blog>blogList = blogService.selectAll(account.getAccountId());
			model.addAttribute("blogList", blogList);
			model.addAttribute("accountName", account.getAccountName());
			return "bolg_list.html";
		}
	}
	
	//blog Registerのpageを取得
	//获取创建blog的页面
	@GetMapping("/blog/register")
	public String getBlogRegisterPage(Model model) {
		AccountEntity account = (AccountEntity)session.getAttribute("account");
		if(account == null) {
			return "redirect:/login";
		}else {
			model.addAttribute("accountName", account.getAccountName());
			return "blog_register.html";
		}
	}
	
	//商品登记（とうき）の方法
	//创建blog！！！
	@PostMapping("/blog/register/process")
	public String blogRegister(@RequestParam String blogTitle,
							   @RequestParam String blogType,
							   @RequestParam MultipartFile blogImage,
							   @RequestParam String blogArticle) {
		AccountEntity account = (AccountEntity)session.getAttribute("account");
		if(account == null) {
			return "redirect:/login";
		}else {
			//blogImageのファイル名を取得する。
			//获取blogImage的文件名
			String fileName = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-").format(new Date()) + blogImage.getOriginalFilename();
			try {
				Files.copy(blogImage.getInputStream(),Path.of("src/main/resources/static/product-img/" + fileName));
			}catch(IOException e) {
				e.printStackTrace();
			}
			if(blogService.createBlog(blogTitle, blogType, fileName, blogArticle)) {
				return "redirect:blog/list";
			}else {
				return "redirect:blog/register";
			}
		}
	}
	
	//取得blog的编辑页面
	//多次编辑页面 //非创建！ 必须已有blogId
	@GetMapping("blog/edit/{blogId}")
	//@PathVariable注释 表示blogId从前端页面回传
	public String getBlogEditPage(@PathVariable Long blogId, Model model) {
		AccountEntity account = (AccountEntity)session.getAttribute("account");
		if(account == null) {
			return "redirect:/login";
		}else {
			Blog blogList = blogService.getBlogPost(blogId);
			if(blogList == null) {
				return "redirect:/blog/List";
			}else {
				model.addAttribute("blogList", blogList);
				//这里可能有问题
				//待定
				return "blog_edit.html";
			}
			//return "blog_edit.html";
		}
	}
	
	
	//
	//
	
	
	
	
	

}
